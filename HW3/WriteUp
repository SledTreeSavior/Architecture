Degree of Success:	I think that my project had a 100% degree of success. The program computes N fib numbers and saves them. For some reason, commenting the code caused issues, so I have added the commented code here.
Description:		My program calls a recursive function FIB. Then, the FIB of n - 1 and n - 2 are calculated, added, and returned to be saved in memory in the faddr array under f0.
Email:			Kyle_Savoie@student.uml.edu

LOOP:   LODD PasCnt:  		; num of fibs to do in PasCnt
	JZER DONE:		; no more passes, go to done
	SUBD c1:
	STOD PasCnt:		; - - passes remaining
P1:	LODD daddr:		; load a pointer to fib arg
	PSHI			; push arg for fib on stack
	ADDD c1:
	STOD daddr:		; inc, store pointer for next d[n] 
	CALL FIB:		; call fib (arg on stack)
	INSP 1			; clear stack on fib return
P2:	PUSH			; put return AC (fib(n)) on stack
	LODD faddr:		; load a pointer to result f[n]
	POPI			; pop result off stack into f[n]
	ADDD c1:
	STOD faddr:		; inc, store pointer for next f[n]
	JUMP LOOP:		; go to top for next pass
FIB: LODL 1			; load the n from stack into the accumulator
	JZER FIBZER:		; if the n is 0 then jump to FIBZER
	SUBD c1:		; subtract 1
	JZER FIBONE:		; if the n is 1 then jump to FIBONE
	PUSH 			; push value to stack
	CALL FIB:		; call fib(n - 1)
	PUSH			; push value to stack
	LODL 1			; grab the value that was pushed before the call, (n - 1)
	SUBD c1:		; subtract 1 from (n - 1)
	PUSH			; push the value to the stack of (n - 2)
	CALL FIB:		; call fib(n - 2)
	ADDL 1			; add fib(n - 1) and fib(n - 2)
	INSP 3			; clean the stack
	RETN
RTN:	LODD tmp:		; load AC with tmp: .. final result
	RETN
FIBZER:	LODD c0:
	RETN			; AC = 0 for fib(0)
FIBONE:	LODD c1:
	RETN			; AC = 1 for fib(1)
DONE:	HALT	 
.LOC 	100			; locate data beginning at 100
d0:  	3			; array of args for fib function
     	9
     	18
     	23
     	25
f0:  	0			; array of result locs for fib returns
     	0
     	0
     	0 
     	0
daddr:  d0:			; start address of fib args 
faddr:  f0:			; start address of fib results
c0: 	0			; constants 
c1: 	1
PasCnt: 5			; number of data elements to process
tmp:	0			; initial value for fib(2)
